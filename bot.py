import logging
import time
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler


from config import TOKEN

from database import DataBase



logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


db = DataBase()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.from_user.first_name:
        name = message.from_user.first_name
    else:
        name = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    db.create_user(message.from_user.id,message.from_user.username, name)

    photo = open("media/start.jpg", 'rb')
    caption = """–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –ö–∏–±–µ—Ä–®–∫–æ–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–π KiberOne –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å 

–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –∞–¥—Ä–µ—Å—É:
üìç–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ü–∞—Ä—Ñ—ë–Ω–æ–≤—Å–∫–∞—è —É–ª., 14, –∫–æ—Ä–ø. 1 (—ç—Ç–∞–∂ 1)

‚úÖ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–æ–∑–¥–∞—Å—Ç —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º –∏ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ—Ç —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è –≤ –∏–≥—Ä–µ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç üñ•Ô∏è

‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è 120 –º–∏–Ω—É—Ç. –í—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º. –ù–∏—á–µ–≥–æ –±—Ä–∞—Ç—å —Å —Å–æ–±–æ–π –Ω–µ –Ω—É–∂–Ω–æ.

–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞üëá
"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("6-9 –ª–µ—Ç", "9-12 –ª–µ—Ç", "12-14 –ª–µ—Ç")

    await bot.send_photo(message.from_user.id, photo, caption=caption, reply_markup=markup)


@dp.message_handler(lambda message: message.text in ["6-9 –ª–µ—Ç", "9-12 –ª–µ—Ç", "12-14 –ª–µ—Ç"])
async def get_age(message: types.Message):
    db.add_age(message.text, message.from_user.id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –∏ —Å–æ–≥–ª–∞—Å—É–µ—Ç —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
        reply_markup=markup)


@dp.message_handler(content_types=['contact'])
async def contact(message: types.Message):
    db.add_phone(message.contact.phone_number, message.from_user.id)

    message_text = """–°–ø–∞—Å–∏–±–æ!

–°–∫–æ—Ä–æ –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∏ —Å–æ–≥–ª–∞—Å—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞!

–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —É—Ä–æ–∫–µ! ü§ó"""
    markup = types.ReplyKeyboardRemove()
    await message.answer(message_text, reply_markup=markup)
    await send_lead(message)


async def send_lead(message: types.Message):
    user_data = db.get_user(message.from_user.id)
    lead_text = f"–ò–º—è: {user_data['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n–¢–µ–ª–µ—Ñ–æ–Ω: +{user_data['phone']}\nUsername: @{user_data['username']}"
    db.delete_user(message.from_user.id)
    await bot.send_message(-1002072461379, lead_text)


async def send_reminder(bot):
    users = db.get_user_ids_and_time()
    for user in users:
        dt_object = datetime.utcfromtimestamp(user[1])
        if (dt_object + timedelta(days=1) < datetime.now()):

            db.update_time(user[0])
            await bot.send_message(int(user[0]), "‚ùó‚ùó‚ùó–ù–∞–ø–æ–º–∏–Ω–∞–µ–º‚ùó‚ùó‚ùó\n–í—ã –Ω–µ –ø–æ–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É!")





if __name__ == '__main__':
    from aiogram import executor


    while True:
        try:
            scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
            scheduler.add_job(send_reminder, trigger='interval', seconds=60 * 60, kwargs={'bot': bot})
            scheduler.start()
            print('sheduler started!')
            print('Bot id running...')
            executor.start_polling(dp, skip_updates=True)
        except:
            print('error in main loop!')
        finally:
            print('Bot stopped!')



