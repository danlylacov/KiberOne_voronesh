import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from config import TOKEN, ADMINS

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

info = {}


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    photo = open("media/start.jpg", 'rb')
    caption = """–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –ö–∏–±–µ—Ä–®–∫–æ–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–π KiberOne –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å 

–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –∞–¥—Ä–µ—Å—É:
üìç–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ü–∞—Ä—Ñ—ë–Ω–æ–≤—Å–∫–∞—è —É–ª., 14, –∫–æ—Ä–ø. 1 (—ç—Ç–∞–∂ 1)

‚úÖ –í–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–æ–∑–¥–∞—Å—Ç —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º –∏ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ—Ç —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è –≤ –∏–≥—Ä–µ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç üñ•Ô∏è

‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è 120 –º–∏–Ω—É—Ç. –í—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º. –ù–∏—á–µ–≥–æ –±—Ä–∞—Ç—å —Å —Å–æ–±–æ–π –Ω–µ –Ω—É–∂–Ω–æ.

–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞üëá
"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("6-9 –ª–µ—Ç", "9-12 –ª–µ—Ç", "12-14 –ª–µ—Ç")

    await bot.send_photo(message.from_user.id, photo, caption=caption, reply_markup=markup)


@dp.message_handler(lambda message: message.text in ["6-9 –ª–µ—Ç", "9-12 –ª–µ—Ç", "12-14 –ª–µ—Ç"])
async def get_district(message: types.Message):
    info[message.from_user.username] = [message.text]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –∏ —Å–æ–≥–ª–∞—Å—É–µ—Ç —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
        reply_markup=markup)


@dp.message_handler(content_types=['contact'])
async def contact(message: types.Message):
    phonenumber = str(message.contact.phone_number)
    info[message.from_user.username].append(phonenumber)

    message_text = """–°–ø–∞—Å–∏–±–æ!

–°–∫–æ—Ä–æ –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∏ —Å–æ–≥–ª–∞—Å—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞!

–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —É—Ä–æ–∫–µ! ü§ó"""
    markup = types.ReplyKeyboardRemove()
    await message.answer(message_text, reply_markup=markup)

    await send_lead(message)


async def send_lead(message: types.Message):
    for admin_id in ADMINS:
        lead_text = f"–í–æ–∑—Ä–∞—Å—Ç: {info[message.from_user.username][0]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {info[message.from_user.username][1]}\nUsername: @{message.from_user.username}"
        await bot.send_message(admin_id, lead_text)


if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
